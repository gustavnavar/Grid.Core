package me.agno.gridjavacore.columns;

import me.agno.gridjavacore.IGridColumnCollection;
import me.agno.gridjavacore.utils.Pair;

import java.util.function.Function;

/**
 * Represents a column in a grid.
 *
 * @param <T> the type of data in the column
 */
public interface IColumn<T> {

    /**
     * Returns the name of the column.
     *
     * @return the name of the column
     */
    String getName();

    /**
     * Returns the field name of the column.
     *
     * @return the field name of the column
     */
    String getFieldName();

    /**
     * Retrieves the target type of the IColumn instance.
     * The target type defines the data type that the column represents.
     *
     * @return the target type of the IColumn instance
     */
    Class<?> getTargetType();

    /**
     * Sets the field name of the column.
     *
     * @param fieldName the field name to set
     */
    void setFieldName(String fieldName);

    /**
     * Calculates the sum of the column.
     *
     * @param enabled a boolean value indicating whether the sum calculation should be enabled
     * @return the instance of the column for method chaining
     */
    IGridColumn<T> sum(boolean enabled);

    /**
     * Enables or disables the calculation of the average value of the column.
     *
     * @param enabled a boolean value indicating whether the average calculation should be enabled
     * @return the instance of the column for method chaining
     */
    IGridColumn<T> average(boolean enabled);

    /**
     * Enables or disables the calculation of the maximum value of the column.
     *
     * @param enabled a boolean value indicating whether the maximum calculation should be enabled
     * @return the instance of the column for method chaining
     */
    IGridColumn<T> max(boolean enabled);

    /**
     * Enables or disables a custom calculation of the column.
     *
     * @param name the name of the calculated column
     * @param calculation the calculation function for the calculated column
     * @return the added grid column
     */
    IGridColumn<T> calculate(String name, Function<IGridColumnCollection<T>, Object> calculation);

    /**
     * Enables or disables the calculation of the minimum value of the column.
     *
     * @param enabled a boolean value indicating whether the minimum calculation should be enabled
     * @return the instance of the column for method chaining
     */
    IGridColumn<T> min(boolean enabled);

    /**
     * Sets whether the column is a primary key column.
     *
     * @param enabled a boolean value indicating whether the column is a primary key column
     * @return the instance of the column for method chaining
     */
    IGridColumn<T> setPrimaryKey(boolean enabled);

    /**
     * Sets whether the column is a primary key column and whether it is auto-generated.
     *
     * @param enabled        a boolean value indicating whether the column is a primary key column
     * @param autoGenerated  a boolean value indicating whether the column is auto-generated
     * @return the instance of the column for method chaining
     */
    IGridColumn<T> setPrimaryKey(boolean enabled, boolean autoGenerated);

    /**
     * Returns an array of pair values indicating the foreign keys for a subgrid column.
     *
     * @return the array of pair values indicating the foreign keys for a subgrid column
     */
    Pair<String, String>[] getSubgridKeys();

    /**
     * Retrieves the target type of the subgrid.
     * The target type defines the data type that the subgrid column represents.
     *
     * @return the target type of the subgrid column
     */
    Class<?> getSubgridTargetType();

    /**
     * Sets target type and foreign keys for a subgrid column.
     *
     * @param subgridKeys an array of pair values indicating the foreign keys for a subgrid column
     * @param subgridTargetType the target type defines the data type of the subgrid
     * @return the instance of the column for method chaining
     */
    <S> IGridColumn<T> subgrid(Class<S> subgridTargetType, Pair<String, String>[] subgridKeys);
}
