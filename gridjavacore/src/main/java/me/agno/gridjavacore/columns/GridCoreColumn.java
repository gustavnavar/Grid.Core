package me.agno.gridjavacore.columns;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import me.agno.gridjavacore.IGrid;
import me.agno.gridjavacore.IGridColumnCollection;
import me.agno.gridjavacore.filtering.ColumnFilterValue;
import me.agno.gridjavacore.filtering.DefaultColumnFilter;
import me.agno.gridjavacore.filtering.GridFilterType;
import me.agno.gridjavacore.filtering.IColumnFilter;
import me.agno.gridjavacore.searching.DefaultColumnSearch;
import me.agno.gridjavacore.searching.IColumnSearch;
import me.agno.gridjavacore.sorting.GridSortDirection;
import me.agno.gridjavacore.sorting.GridSortMode;
import me.agno.gridjavacore.sorting.IColumnOrderer;
import me.agno.gridjavacore.sorting.OrderByGridOrderer;
import me.agno.gridjavacore.sorting.ThenByColumnOrderer;
import me.agno.gridjavacore.totals.DefaultColumnTotals;
import me.agno.gridjavacore.totals.IColumnTotals;
import me.agno.gridjavacore.totals.Total;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;

/**
 * Represents a column in the GridCore grid.
 *
 * @param <T> The type of the grid's data.
 * @param <TData> The type of the column's data.
 */
public class GridCoreColumn<T, TData> implements IGridColumn<T> {

    /**
     * Represents a column in a grid with a specified expression for the column value.
     * This class implements the {@link IGridColumn} interface.
     * It can be accessed using the getter method.
     */
    @Getter
    private String expression;

    /**
     * The name field represents the name of a grid column.
     * It can be accessed using the getter and setter methods.
     */
    @Getter
    @Setter
    private String name;

    /**
     * Represents a field name in a GridCoreColumn.
     */
    @Getter
    @Setter
    private String fieldName;

    /**
     * Represents the target type used in the GridCoreColumn class.
     *
     * @param <TData> the type of data displayed in the column
     */
    @Getter
    private Class<TData> targetType;

    /**
     * Sets the target type for the grid column.
     *
     * @param targetType the class representing the target type of the grid
     */
    void setTargetType(Class<?> targetType) {
        this.targetType = (Class<TData>)targetType;
    }

    /**
     * Represents the parent Grid.
     *
     * This variable is of type IGrid<T>, where T is a generic type parameter.
     **/
    @Getter
    private IGrid<T> parentGrid;

    /**
     * Represents a variable that determines whether the column is hidden.
     */
    @Getter
    @Setter
    private boolean hidden;

    /**
     * This variable represents whether the column is a primary key in the grid.
     *
     * @return true if the column is a primary key, false otherwise
     */
    @Getter
    private boolean primaryKey = false;

    /**
     * Sets whether the column is a primary key column and whether it is auto-generated.
     *
     * @param enabled        true to set the column as a primary key, false otherwise
     * @return the updated IGridColumn instance
     */
    public IGridColumn<T> setPrimaryKey(boolean enabled) {
        return setPrimaryKey(enabled, true);
    }

    /**
     * Sets whether the column is a primary key column and whether it is auto-generated.
     *
     * @param enabled        true to set the column as a primary key, false otherwise
     * @param autoGenerated  true to set the column as auto-generated, false otherwise
     * @return the updated IGridColumn instance
     */
    public IGridColumn<T> setPrimaryKey(boolean enabled, boolean autoGenerated) {
        this.primaryKey = enabled;
        this.autoGeneratedKey = autoGenerated;
        return this;
    }

    /**
     * A flag indicating whether the column is an auto-generated key column.
     */
    @Getter
    @Setter(AccessLevel.PROTECTED)
    private boolean autoGeneratedKey = false;

    /**
     * Represents whether the filter is enabled for the grid column.
     */
    @Getter
    @Setter
    private boolean filterEnabled;

    /**
     * Represents the initial filter settings for a grid column.
     */
    @Getter
    @Setter
    private ColumnFilterValue initialFilterSettings;

    /**
     * Represents the column filter for a grid column.
     */
    @Getter
    private IColumnFilter<T> filter;

    /**
     * Represents the column search for a grid column.
     */
    @Getter
    private IColumnSearch<T> search;

    /**
     * Represents whether the grid column is sorted.
     */
    @Getter
    @Setter
    private boolean sorted;

    /**
     * A variable indicating whether the column sorting is defined or not.
     */
    @Getter
    @Setter(AccessLevel.PROTECTED)
    private boolean columnSortDefined = false;

    /**
     * Represents whether sorting is enabled for a GridCoreColumn.
     */
    @Getter
    @Setter(AccessLevel.PROTECTED)
    private boolean sortEnabled;

    /**
     * Represents the sorting mode for a grid column.
     * The grid can have two sorting modes: THREE_STATE and TWO_STATE.
     *
     * THREE_STATE: The column can be sorted in ascending order, descending order, or not sorted.
     * TWO_STATE: The column can be sorted in ascending order or descending order.
     *
     * By default, the sort mode is set to THREE_STATE.
     *
     * This class is not meant to be instantiated directly. Instead, use the GridCoreColumn class
     * to create a column in the grid and set the sorting mode using the setSortMode() method.
     */
    @Getter
    @Setter(AccessLevel.PROTECTED)
    private GridSortMode sortMode = GridSortMode.THREE_STATE;

    /**
     * Represents the direction of sorting for a grid column.
     * The direction can be either ASCENDING or DESCENDING.
     */
    @Getter
    private Optional<GridSortDirection> direction;

    /**
     * Sets the sort direction for the grid column.
     *
     * @param direction the sort direction of the grid column
     */
    public void setDirection(GridSortDirection direction) {
        this.direction = Optional.ofNullable(direction);
    }

    /**
     * Represents the initial sort direction for a grid column.
     */
    @Getter
    private Optional<GridSortDirection> initialDirection;

    /**
     * Sets the initial sort direction for the grid column.
     *
     * @param initialDirection the initial sort direction of the grid column
     */
    public void setInitialDirection(GridSortDirection initialDirection) {
        this.initialDirection = Optional.ofNullable(initialDirection);
    }

    /**
     * Represents a list of column orderers for a grid column.
     */
    @Getter
    private List<IColumnOrderer<T>> orderers = new ArrayList<IColumnOrderer<T>>();

    /**
     * Represents the totals for a grid column.
     */
    @Getter
    private IColumnTotals totals;

    /**
     * Determines whether the sum calculation is enabled for the grid column.
     * When sum calculation is enabled, the grid will calculate the sum of the values in this column.
     */
    @Getter
    @Setter
    private boolean sumEnabled = false;

    /**
     * Represents whether the average calculation is enabled for a grid column.
     */
    @Getter
    @Setter
    private boolean averageEnabled = false;

    /**
     * This variable represents whether the "max" functionality is enabled for the grid column.
     * By default, it is set to false.
     */
    @Getter
    @Setter
    private boolean maxEnabled = false;

    /**
     * Indicates whether the minimum calculation is enabled for the grid column.
     *
     * @return true if the minimum calculation is enabled, false otherwise
     */
    @Getter
    @Setter
    private boolean minEnabled = false;

    /**
     * Represents a boolean flag indicating whether calculation is enabled for a grid column.
     * If calculation is enabled, the column will perform calculations based on the defined calculations.
     * By default, calculation is disabled.
     */
    @Getter
    @Setter
    private boolean calculationEnabled = false;

    /**
     * Represents a LinkedHashMap of calculations for grid columns.
     * Each calculation is associated with a column name and a calculation function.
     *
     * @param <T> the type of the grid data
     */
    @Getter
    @Setter
    private LinkedHashMap<String, Function<IGridColumnCollection<T>, Object>> calculations;

    /**
     * Represents a map of calculation values for a grid column.
     */
    @Getter
    @Setter
    private LinkedHashMap<String, Total> calculationValues;

    /**
     * Represents a variable for storing the total value in a grid column.
     */
    @Getter
    @Setter
    private Total sumValue;

    /**
     * A variable representing the average value of a grid column.
     */
    @Getter
    @Setter
    private Total averageValue;

    /**
     * Represents the maximum value for a grid column.
     */
    @Getter
    @Setter
    private Total maxValue;

    /**
     * Represents the minimum value for a grid column total.
     */
    @Getter
    @Setter
    private Total minValue;

    /**
     * Represents a column in a grid.
     *
     * @param expression the expression used for sorting, filtering, and searching the column
     * @param targetType the class representing the target type of the column
     * @param grid the grid in which the column belongs to
     */
    public GridCoreColumn(String expression, Class<TData> targetType, IGrid<T> grid)  {

        setSortEnabled(false);
        setHidden(false);

        this.targetType = targetType;
        this.parentGrid = grid;

        if (expression != null) {
            this.expression = expression;
            this.orderers.add(0, new OrderByGridOrderer<T, TData>(expression));
            this.filter = new DefaultColumnFilter<T, TData>(expression, targetType);
            this.search = new DefaultColumnSearch<T, TData>(expression, targetType);
            this.totals = new DefaultColumnTotals(expression);

            //Generate unique column name:
            setFieldName(expression);
            setName(getFieldName());
        }

        setCalculations(new LinkedHashMap<String, Function<IGridColumnCollection<T>, Object>>());
        setCalculationValues(new LinkedHashMap<String, Total>());
    }

    /**
     * Sets the sortable property of the grid column.
     *
     * @param sort true to enable sorting, false otherwise
     * @return the updated IGridColumn instance
     */
    public IGridColumn<T> sortable(boolean sort) {
        return sortable(sort, null);
    }

    /**
     * Sets the sortable property of the grid column.
     *
     * @param sort          true to enable sorting, false otherwise
     * @param gridSortMode  the sort mode of the grid column
     * @return the updated IGridColumn instance
     */
    public IGridColumn<T> sortable(boolean sort, GridSortMode gridSortMode) {

        if (gridSortMode == null)
            gridSortMode= GridSortMode.THREE_STATE;

        if (sort && this.expression == null) {
            return this; //cannot enable sorting for column without expression
        }
        setColumnSortDefined(true);
        setSortEnabled(sort);
        setSortMode(gridSortMode);
        return this;
    }

    IGridColumn<T> internalSortable(boolean sort) {
        return internalSortable(sort, null);
    }

    /**
     * Allows internal sorting of the grid column.
     *
     * @param sort true to enable sorting, false otherwise
     * @param gridSortMode the sort mode of the grid column
     * @return the updated IGridColumn instance
     */
    public IGridColumn<T> internalSortable(boolean sort, GridSortMode gridSortMode) {

        if (gridSortMode == null)
            gridSortMode= GridSortMode.THREE_STATE;

        if (sort && this.expression == null) {
            return this; //cannot enable sorting for column without expression
        }

        if (!isColumnSortDefined()) {
            setSortEnabled(sort);
            setSortMode(gridSortMode);
        }
        return this;
    }

    /**
     * Sets the initial sort direction for the grid column.
     *
     * @param direction the initial sort direction of the grid column
     * @return the updated instance of IGridColumn
     */
    public IGridColumn<T> sortInitialDirection(GridSortDirection direction) {

        setInitialDirection(direction);

        var sortSettings = this.parentGrid.getSettings().getSortSettings();
        if (sortSettings.getColumnName() == null || sortSettings.getColumnName().trim().isEmpty()) {

            setSorted(true);
            setDirection(direction);

            // added to enable initial sorting
            sortSettings.setColumnName(getName());
            sortSettings.setDirection(direction);
        }

        return this;
    }

    /**
     * Creates a column orderer for secondary sorting based on the given expression and with an initial sort direction of ascending.
     *
     * @param expression the expression used for secondary sorting
     * @return the updated instance of IGridColumn
     */
    public IGridColumn<T> thenSortBy(String expression) {
        this.orderers.add(new ThenByColumnOrderer<T, TData>(expression, GridSortDirection.ASCENDING));
        return this;
    }

    /**
     * Sorts the grid column in descending order based on the given expression.
     *
     * @param expression the expression used for sorting the column
     * @return the updated instance of IGridColumn
     */
    public  IGridColumn<T> thenSortByDescending(String expression) {
        this.orderers.add(new ThenByColumnOrderer<T, TData>(expression, GridSortDirection.DESCENDING));
        return this;
    }

    /**
     * Enables or disables filtering for the grid column.
     *
     * @param enable true to enable filtering, false to disable it
     * @return the updated instance of IGridColumn
     */
    public IGridColumn<T> filterable(boolean enable) {
        if (enable && this.expression == null) {
            return this; //cannot enable filtering for column without expression
        }

        setFilterEnabled(enable);
        return this;
    }

    /**
     * Sets the initial filter for the grid column.
     *
     * @param type  the type of filter to apply
     * @param value the value to filter by
     * @return the updated instance of IGridColumn
     */
    public IGridColumn<T> setInitialFilter(GridFilterType type, String value) {
        var filter = new ColumnFilterValue(getName(), type, value);
        setInitialFilterSettings(filter);
        return this;
    }

    /**
     * Sets whether the column should be included in the calculation of the sum.
     *
     * @param enabled true if the column should be included in the sum calculation, false otherwise
     * @return the updated instance of IGridColumn
     */
    public IGridColumn<T> sum(boolean enabled) {
        this.sumEnabled = enabled;
        return this;
    }

    /**
     * Sets whether the column should be included in the calculation of the average.
     *
     * @param enabled true if the column should be included in the average calculation, false otherwise
     * @return the updated instance of IGridColumn
     */
    public IGridColumn<T> average(boolean enabled) {
        this.averageEnabled = enabled;
        return this;
    }

    /**
     * Sets whether the maximum value calculation is enabled for the grid column.
     *
     * @param enabled true to enable maximum value calculation, false otherwise
     * @return the updated IGridColumn instance
     */
    public IGridColumn<T> max(boolean enabled) {
        this.maxEnabled = enabled;
        return this;
    }

    /**
     * Sets whether the min value calculation is enabled for the grid column.
     *
     * @param enabled true to enable min value calculation, false otherwise
     * @return the updated IGridColumn instance
     */
    public IGridColumn<T> min(boolean enabled) {
        this.minEnabled = enabled;
        return this;
    }

    /**
     * Calculates a value for the grid column based on the provided name and calculation function.
     *
     * @param name The name of the calculation
     * @param calculation A function that takes an IGridColumnCollection instance and returns a calculated value for the grid column
     * @return The updated instance of IGridColumn
     */
    public IGridColumn<T> calculate(String name, Function<IGridColumnCollection<T>, Object> calculation) {
        this.calculationEnabled = true;
        this.calculations.put(name, calculation);
        return this;
    }
}
