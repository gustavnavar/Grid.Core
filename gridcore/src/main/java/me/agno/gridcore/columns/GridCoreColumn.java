package me.agno.gridcore.columns;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import me.agno.gridcore.IGrid;
import me.agno.gridcore.IGridColumnCollection;
import me.agno.gridcore.filtering.ColumnFilterValue;
import me.agno.gridcore.filtering.DefaultColumnFilter;
import me.agno.gridcore.filtering.GridFilterType;
import me.agno.gridcore.filtering.IColumnFilter;
import me.agno.gridcore.searching.DefaultColumnSearch;
import me.agno.gridcore.searching.IColumnSearch;
import me.agno.gridcore.sorting.GridSortDirection;
import me.agno.gridcore.sorting.GridSortMode;
import me.agno.gridcore.sorting.IColumnOrderer;
import me.agno.gridcore.sorting.OrderByGridOrderer;
import me.agno.gridcore.sorting.ThenByColumnOrderer;
import me.agno.gridcore.totals.DefaultColumnTotals;
import me.agno.gridcore.totals.IColumnTotals;
import me.agno.gridcore.totals.Total;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;

public class GridCoreColumn<T, TData> implements IGridColumn<T> {

    @Getter
    private String Expression;

    @Getter
    @Setter
    private String Name;

    @Getter
    @Setter
    private String FieldName;

    @Getter
    private Class<TData> TargetType;

    @Getter
    private IGrid<T> ParentGrid;

    @Getter
    @Setter
    private boolean Hidden;

    @Getter
    private boolean PrimaryKey = false;

    public IGridColumn<T> setPrimaryKey(boolean enabled) {
        return setPrimaryKey(enabled, true);
    }

    public IGridColumn<T> setPrimaryKey(boolean enabled, boolean autoGenerated) {
        PrimaryKey = enabled;
        AutoGeneratedKey = autoGenerated;
        return this;
    }

    @Getter
    @Setter(AccessLevel.PROTECTED)
    private boolean AutoGeneratedKey = false;

    @Getter
    @Setter
    private boolean FilterEnabled;

    @Getter
    @Setter
    private ColumnFilterValue InitialFilterSettings;

    @Getter
    private IColumnFilter<T> Filter;

    @Getter
    private IColumnSearch<T> Search;

    @Getter
    @Setter
    private boolean Sorted;

    @Getter
    @Setter(AccessLevel.PROTECTED)
    private boolean ColumnSortDefined = false;

    @Getter
    @Setter(AccessLevel.PROTECTED)
    private boolean SortEnabled;

    @Getter
    @Setter(AccessLevel.PROTECTED)
    private GridSortMode SortMode = GridSortMode.ThreeState;

    @Getter
    private Optional<GridSortDirection> Direction;

    public void setDirection(GridSortDirection direction) {
        Direction = Optional.ofNullable(direction);
    }

    @Getter
    private Optional<GridSortDirection> InitialDirection;

    public void setInitialDirection(GridSortDirection initialDirection) {
        InitialDirection = Optional.ofNullable(initialDirection);
    }

    @Getter
    private List<IColumnOrderer<T>> Orderers = new ArrayList<IColumnOrderer<T>>();

    @Getter
    private IColumnTotals Totals;

    @Getter
    @Setter
    private boolean SumEnabled = false;

    @Getter
    @Setter
    private boolean AverageEnabled = false;

    @Getter
    @Setter
    private boolean MaxEnabled = false;

    @Getter
    @Setter
    private boolean MinEnabled = false;

    @Getter
    @Setter
    private boolean CalculationEnabled = false;

    @Getter
    @Setter
    private LinkedHashMap<String, Function<IGridColumnCollection<T>, Object>> Calculations;

    @Getter
    @Setter
    private LinkedHashMap<String, Total> CalculationValues;

    @Getter
    @Setter
    private Total SumValue;

    @Getter
    @Setter
    private Total AverageValue;

    @Getter
    @Setter
    private Total MaxValue;

    @Getter
    @Setter
    private Total MinValue;


    public GridCoreColumn(String expression, Class<TData> targetType, IGrid<T> grid)  {

        setSortEnabled(false);
        setHidden(false);

        TargetType = targetType;
        ParentGrid = grid;

        if (expression == null) {
            Expression = expression;
            Orderers.add(0, new OrderByGridOrderer<T, TData>(expression));
            Filter = new DefaultColumnFilter<T, TData>(expression, targetType);
            Search = new DefaultColumnSearch<T, TData>(expression, targetType);
            Totals = new DefaultColumnTotals(expression);

            //Generate unique column name:
            setFieldName(expression);
            setName(getFieldName());
        }

        setCalculations(new LinkedHashMap<String, Function<IGridColumnCollection<T>, Object>>());
        setCalculationValues(new LinkedHashMap<String, Total>());
    }


    public IGridColumn<T> sortable(boolean sort) {
        return sortable(sort, null);
    }

    public IGridColumn<T> sortable(boolean sort, GridSortMode gridSortMode) {

        if (gridSortMode == null)
            gridSortMode= GridSortMode.ThreeState;

        if (sort && Expression == null) {
            return this; //cannot enable sorting for column without expression
        }
        setColumnSortDefined(true);
        setSortEnabled(sort);
        setSortMode(gridSortMode);
        return this;
    }

    IGridColumn<T> internalSortable(boolean sort) {
        return internalSortable(sort, null);
    }

    IGridColumn<T> internalSortable(boolean sort, GridSortMode gridSortMode) {

        if (gridSortMode == null)
            gridSortMode= GridSortMode.ThreeState;

        if (sort && Expression == null) {
            return this; //cannot enable sorting for column without expression
        }

        if (!isColumnSortDefined()) {
            setSortEnabled(sort);
            setSortMode(gridSortMode);
        }
        return this;
    }

    public IGridColumn<T> sortInitialDirection(GridSortDirection direction) {

        setInitialDirection(direction);

        var sortSettings = ParentGrid.getSettings().getSortSettings();
        if (sortSettings.getColumnName() == null || sortSettings.getColumnName().trim().isEmpty()) {

            setSorted(true);
            setDirection(direction);

            // added to enable initial sorting
            sortSettings.setColumnName(getName());
            sortSettings.setDirection(direction);
        }

        return this;
    }

    public IGridColumn<T> thenSortBy(String expression) {
        Orderers.add(new ThenByColumnOrderer<T, TData>(expression, GridSortDirection.Ascending));
        return this;
    }

    public  IGridColumn<T> thenSortByDescending(String expression) {
        Orderers.add(new ThenByColumnOrderer<T, TData>(expression, GridSortDirection.Descending));
        return this;
    }

    public IGridColumn<T> filterable(boolean enable) {
        if (enable && Expression == null) {
            return this; //cannot enable filtering for column without expression
        }

        setFilterEnabled(enable);
        return this;
    }

    public IGridColumn<T> setInitialFilter(GridFilterType type, String value) {
        var filter = new ColumnFilterValue(getName(), type, value);
        setInitialFilterSettings(filter);
        return this;
    }

    public IGridColumn<T> sum(boolean enabled) {
        SumEnabled = enabled;
        return this;
    }

    public IGridColumn<T> average(boolean enabled) {
        AverageEnabled = enabled;
        return this;
    }

    public IGridColumn<T> max(boolean enabled) {
        MaxEnabled = enabled;
        return this;
    }

    public IGridColumn<T> min(boolean enabled) {
        MinEnabled = enabled;
        return this;
    }

    public IGridColumn<T> calculate(String name, Function<IGridColumnCollection<T>, Object> calculation) {
        CalculationEnabled = true;
        Calculations.put(name, calculation);
        return this;
    }
}
