package me.agno.gridcore.columns;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import me.agno.gridcore.IGridColumnCollection;
import me.agno.gridcore.filtering.ColumnFilterValue;
import me.agno.gridcore.filtering.GridFilterType;
import me.agno.gridcore.filtering.IColumnFilter;
import me.agno.gridcore.searching.IColumnSearch;
import me.agno.gridcore.sorting.GridSortDirection;
import me.agno.gridcore.sorting.GridSortMode;
import me.agno.gridcore.sorting.IColumnOrderer;
import me.agno.gridcore.totals.IColumnTotals;
import me.agno.gridcore.totals.Total;
import me.agno.gridcore.utils.IGrid;
import me.agno.gridcore.utils.QueryDictionary;

import java.util.Collection;
import java.util.function.Function;

public abstract class GridCoreColumnBase<T, TKey> implements IGridColumn<T>
{

    @Getter
    @Setter(AccessLevel.PROTECTED)
    private boolean ColumnSortDefined = false;

    @Getter
    @Setter(AccessLevel.PROTECTED)
    private boolean SortEnabled;

    @Getter
    @Setter(AccessLevel.PROTECTED)
    private GridSortMode SortMode = GridSortMode.ThreeState;

    @Getter
    @Setter
    private String Name;

    @Getter
    @Setter
    private String FieldName;

    @Getter
    @Setter
    private boolean Sorted;

    @Getter
    @Setter
    private GridSortDirection Direction;

    @Getter
    @Setter
    private GridSortDirection InitialDirection;

    @Getter
    @Setter
    private boolean Hidden;

    @Getter
    private boolean PrimaryKey = false;

    public IGridColumn<T> setPrimaryKey(boolean enabled) {
        return SetPrimaryKey(enabled, true);
    }

    public IGridColumn<T> setPrimaryKey(boolean enabled, boolean autoGenerated) {
        PrimaryKey = enabled;
        AutoGeneratedKey = autoGenerated;
        return this;
    }

    @Getter
    @Setter(AccessLevel.PROTECTED)
    private boolean AutoGeneratedKey = false;

    @Getter
    @Setter
    private boolean SumEnabled = false;

    @Getter
    @Setter
    private boolean AverageEnabled = false;

    @Getter
    @Setter
    private boolean MaxEnabled = false;

    @Getter
    @Setter
    private boolean MinEnabled = false;

    @Getter
    @Setter
    public boolean CalculationEnabled = false;

    @Getter
    @Setter
    private QueryDictionary<Function<IGridColumnCollection<T>, Object>> Calculations;

    @Getter
    @Setter
    private QueryDictionary<Total> CalculationValues;

    @Getter
    @Setter
    private Total SumValue;

    @Getter
    @Setter
    private Total AverageValue;

    @Getter
    @Setter
    private Total MaxValue;

    @Getter
    @Setter
    private Total MinValue;

    public IGridColumn<T> Sum(boolean enabled) {
        SumEnabled = enabled;
        return this;
    }

    public IGridColumn<T> Average(boolean enabled) {
        AverageEnabled = enabled;
        return this;
    }

    public IGridColumn<T> Max(boolean enabled) {
        MaxEnabled = enabled;
        return this;
    }

    public IGridColumn<T> Min(boolean enabled) {
        MinEnabled = enabled;
        return this;
    }

    public IGridColumn<T> Calculate(String name, Function<IGridColumnCollection<T>, Object> calculation) {
        CalculationEnabled = true;
        Calculations.AddParameter(name, calculation);
        return this;
    }

    @Getter
    private IGrid<T> ParentGrid;

    public IGridColumn<T> SetInitialFilter(GridFilterType type, String value) {
        var filter = new ColumnFilterValue(getName(), type, value);
        setInitialFilterSettings(filter);
        return this;
    }

    public abstract IGridColumn<T> SortInitialDirection(GridSortDirection direction);

    public abstract <TKey> IGridColumn<T> ThenSortBy(Function<T, TKey> expression);

    public abstract <TKey> IGridColumn<T> ThenSortByDescending(Function<T, TKey> expression);

    @Getter
    private Collection<IColumnOrderer<T>> Orderers;

    public abstract IGridColumn<T> Sortable(boolean sort);

    public abstract IGridColumn<T> Sortable(boolean sort, GridSortMode gridSortMode);

    abstract IGridColumn<T> InternalSortable(boolean sort, GridSortMode gridSortMode);

    @Getter
    @Setter
    private boolean FilterEnabled;

    @Getter
    @Setter
    private ColumnFilterValue InitialFilterSettings;

    public abstract IGridColumn<T> Filterable(boolean showColumnValuesVariants);

    public abstract IGridColumn<T> SetFilterWidgetType(String typeName);

    public abstract IGridColumn<T> SetFilterWidgetType(String typeName, Object widgetData);

    @Getter
    private IColumnFilter Filter;

    @Getter
    private String FilterWidgetTypeName;

    @Getter
    @Setter(AccessLevel.PROTECTED)
    private Object FilterWidgetData;

    @Getter
    private IColumnSearch<T> Search;

    @Getter
    private IColumnTotals<T, TKey> Totals;
}
